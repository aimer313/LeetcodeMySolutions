class Solution1 {
public:
    int solve(vector<vector<int>> matrix , int i , int j , int n , int m){
        if(j<0 || j>=m) return 1e9;

        if(i == 0) return matrix[0][j];

        int s = matrix[i][j] + solve(matrix , i-1 , j , n , m);
        int ld = matrix[i][j] + solve(matrix , i-1 , j-1 , n , m);
        int rd = matrix[i][j] + solve(matrix , i-1 , j+1 , n , m);

        return min(s,min(ld,rd));
        
    }
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();
        int mn = INT_MAX;
        for(int j = 0 ; j<m ; j++){
            mn = min(mn , solve(matrix , n-1 , j , n , m));
        }
        return mn;
    }
};


class Solution2 {
public:
    int solve(vector<vector<int>> matrix , int i , int j , int n , int m , vector<vector<int>>& dp){
        if(j<0 || j>=m) return 1e9;

        if(i == 0) return matrix[0][j];
        if(dp[i][j] != -1) return dp[i][j];

        int s = matrix[i][j] + solve(matrix , i-1 , j , n , m,dp);
        int ld = matrix[i][j] + solve(matrix , i-1 , j-1 , n , m,dp);
        int rd = matrix[i][j] + solve(matrix , i-1 , j+1 , n , m,dp);

        return dp[i][j] = min(s,min(ld,rd));
        
    }
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();
        vector<vector<int>> dp(n , vector<int>(n,-1));
        int mn = INT_MAX;
        for(int j = 0 ; j<m ; j++){
            mn = min(mn , solve(matrix , n-1 , j , n , m,dp));
        }
        return mn;
    }
};



class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();
        vector<vector<int>> dp(n , vector<int>(m,0));
       

        for(int j = 0 ; j<m ; j++) dp[0][j] = matrix[0][j];

        for(int i = 1  ; i<n ; i++){
            for(int j = 0 ; j<m ; j++){
                int s = matrix[i][j] + dp[i-1][j];
                int ld = matrix[i][j];
                if(j-1 >= 0)  ld += dp[i-1][j-1];
                else ld += 1e9;
                int rd = matrix[i][j] ;
                if(j+1 < m) rd += dp[i-1][j+1];
                else rd += 1e9;

                dp[i][j] = min(s,min(ld,rd));
            }
        }
        int mn = 1e9;
        for(int j = 0 ; j<m ; j++){
            mn = min(mn , dp[n-1][j]);
        }
        return mn;
        
}
};
