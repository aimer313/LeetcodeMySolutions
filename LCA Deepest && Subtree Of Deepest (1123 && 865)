/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // Deepest Node -> Subtree OR Ances Of Deepest Node => Whose height will be same
    int height(TreeNode* root){
        if(root==NULL) return 0;
        return 1 + max(height(root->left) , height(root->right));
    }
    TreeNode* lcaDeepestLeaves(TreeNode* root) {
        if(root==NULL) return NULL;
        
        int leftSide = height(root->left);
        int rightSide = height(root->right);

        if(leftSide > rightSide) return lcaDeepestLeaves(root->left); // Deepest at left
        else if(rightSide > leftSide) return lcaDeepestLeaves(root->right);
        else return root;

    }
};
