class Solution {
public:
    typedef pair<int, int> pi;
    long long totalCost(vector<int>& costs, int k, int candidates) {
        int n = costs.size();
        long long ans = 0;
        int s = 0 , e = n-1;
        priority_queue<pi, vector<pi>, greater<pi> > pq;

        for(int i = 0 ; i<candidates ; i++){
            if(s<=e){
                pq.push({costs[i] , i});
                s = i+1;
            }
        }

        for(int i = n-1 ; i>=n-candidates ; i--){
            if(s<=e){
                pq.push({costs[i] , i});
                e = i-1;;
            }
        }

        while(k--){
            auto temp = pq.top();
            ans += temp.first;
            pq.pop();


            if(temp.second < s && s<=e){
                pq.push({costs[s] , s});
                s+=1;
            }
            else if(temp.second > e && s<=e){
                pq.push({costs[e] , e});
                e--;
            }
        }

        return ans;
       
    }
};
