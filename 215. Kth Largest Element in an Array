class Solution1 {
public:
    int findKthLargest(vector<int>& nums, int k) {
        sort(nums.begin() , nums.end());
        int n = nums.size();
        int i = n-1;
        while(k--){
            i--;
        }
        return nums[i+1];
    }
};

class Solution2 {
public:
    int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int, vector<int> , greater<int>> pq; // min heap
        for(int i = 0 ; i<k ; i++) pq.push(nums[i]);
        for(int i = k ; i<nums.size() ; i++) {
            if(nums[i] > pq.top()) {
                pq.pop();
                pq.push(nums[i]);
            }
        }
        return pq.top();
    }
};

class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int> pq;
        for(int i = 0 ; i<k ; i++) pq.push(nums[i]);
        for(int i = k ; i<nums.size() ; i++) {
            if(nums[i] < pq.top()) {
                pq.pop();
                pq.push(nums[i]);
            }
        }
        return pq.top();
    }
};
