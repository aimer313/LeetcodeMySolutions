// Recusrion
class Solution1 {
public:
    int solve(vector<int> coins , int ind , int target){
        if(ind == 0){
            return (target % coins[0] == 0);
        }
        int nontake = solve(coins , ind - 1 , target);
        int take = 0;

        if(coins[ind] <= target){
            take = solve(coins , ind , target - coins[ind]);
        }
        return take+nontake;
    }
    int change(int amount, vector<int>& coins) {
        int n = coins.size();
        return solve(coins , n-1 , amount);
    }
};

class Solution2 {
public:
     int solve(vector<int> coins , int ind , int target , vector<vector<int>>& dp){
        if(ind == 0){
            return (target % coins[0] == 0);
        }
        int nontake = solve(coins , ind - 1 , target,dp);
        int take = 0;

        if(coins[ind] <= target){
            take = solve(coins , ind , target - coins[ind],dp);
        }
        return take+nontake;
    }
    int change(int amount, vector<int>& coins) {
        int n = coins.size();
        vector<vector<int>>dp(n,vector<int>(amount+1,-1));
        return solve(coins , n-1 , amount,dp);
    }
};
class Solution3 {
public:
    int change(int amount, vector<int>& coins) {
        int n = coins.size();
        vector<vector<int>> dp(n,vector<int>(amount+1,0));
        for(int t = 0 ; t<=amount ; t++) dp[0][t] = (t % coins[0] == 0);
        for(int i = 1 ; i<n ; i++){
            for(int t = 0 ; t<=amount ; t++){
                int nontake = dp[i - 1][t];
                int take = 0;
                if(coins[i] <= t){
                take = dp[i][t - coins[i]];
                }
            dp[i][t] = take+nontake;
            }
        }
        return dp[n-1][amount];
    }
};


class Solution {
public:
    int change(int amount, vector<int>& coins) {
        int n = coins.size();
        vector<int>prev(amount+1,0),curr(amount+1,0);
        for(int t = 0 ; t<=amount ; t++) prev[t] = (t % coins[0] == 0);
        for(int i = 1 ; i<n ; i++){
            for(int t = 0 ; t<=amount ; t++){
                int nontake = prev[t];
                int take = 0;
                if(coins[i] <= t){
                take = curr[t - coins[i]];
                }
                curr[t] = take+nontake;
            }
            prev = curr;
        }
        return prev[amount];
    }
};

