class Solution1 {
public:
    int solve(vector<int> coins, int ind , int target , vector<vector<int>>& dp){
        if(ind == 0){
            if(target % coins[0] == 0) return target/coins[0];
            return 1e9;
        }
        if(dp[ind][target] != -1) return dp[ind][target];
        int nontake = solve(coins , ind-1 , target,dp);
        int take = INT_MAX;
        if(coins[ind] <= target){
            take = 1 + solve(coins , ind , target - coins[ind],dp);
        }
        return dp[ind][target] = min(take , nontake);
    }
    int coinChange(vector<int>& coins, int amount) {
        int n = coins.size();
        vector<vector<int>>dp(n,vector<int>(amount+1,-1));
        if(solve(coins , n-1 , amount,dp) == 1e9) return -1 ;
        return solve(coins , n-1 , amount,dp) ;
    }
};

class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        int n = coins.size();
        vector<int> prev(amount+1,0) , curr(amount+1,0);

        for(int T = 0 ; T<= amount ; T++){
            if(T % coins[0] == 0) prev[T] = T / coins[0];
            else prev[T] = 1e9;
        }

        for(int ind = 1 ; ind < n ; ind++){
            for(int t = 1 ; t<=amount ; t++){
                int nontake = prev[t];
                int take = INT_MAX;
                if(coins[ind] <= t){
                    take = 1 + curr[t - coins[ind]];
                }
                curr[t] = min(take,nontake);
            }
            prev = curr;
        }

        int ans = prev[amount];
        if(ans >= 1e9) return -1;
        return ans;
    }
};
