// Recursion TC->O(N) && SC->O(N) + O(N)
class Solution1 {
public:
    int solve(int n){
        if(n==0) return 1;
        if(n==1) return 1;
        return (solve(n-1) + solve(n-2));
    }
    int climbStairs(int n) {
        return solve(n);
    }
};
// Memoization TC->O(N) && SC->O(N) + O(N)
class Solution2 {
public:
    int solve(int n , vector<int>& dp){
        if(n==0 || n==1) return 1;

        if(dp[n] != -1) return dp[n];

        dp[n] = solve(n-1 , dp) + solve(n-2 , dp);

        return dp[n];
    }
    int climbStairs(int n) {
        vector<int> dp(n+1,-1);
        return solve(n , dp);
    }
};
// Tabulation TC->O(N) && SC->O(N)
class Solution3 {
public:
    int climbStairs(int n) {
        vector<int> dp(n+1 , -1);
        dp[0] = 1;
        dp[1] = 1;

        for(int i = 2 ; i<=n ; i++){
            dp[i] = dp[i-1] + dp[i-2];
        }

        return dp[n];

    }
};

// Most Optimized TC->O(N) && SC->O(1)
class Solution {
public:
    int climbStairs(int n) {
        int prev2 = 1;
        int prev1 = 1;
        int curr = 1;
        for(int i = 2 ; i<=n ; i++){
            curr = prev1 + prev2;
            prev2 = prev1;
            prev1 = curr;
        }
        return curr;
    }
};
