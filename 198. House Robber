// Recursion 

// Maximum sum of non-adjacent elements -> In CodeStudio
class Solution1 {
public:
    int solve(vector<int> nums , int ind){
        if(ind == 0) return nums[0];
        if(ind < 0) return 0;

        // step 2 Do Stuff

        int pick = nums[ind] + solve(nums , ind - 2);
        int nonpick = 0 + solve(nums , ind - 1);

        return max(pick , nonpick);
    }
    int rob(vector<int>& nums) {
        int n = nums.size();
        return solve(nums , n-1);
    }
};

// Memoization SC -> O(N) + O(N)
class Solution2 {
public:
    int solve(vector<int> nums , int ind , vector<int>& dp){
        if(ind == 0) return nums[0];
        if(ind < 0) return 0;

        // step 2 Do Stuff
        if(dp[ind] != -1) return dp[ind];
        int pick = nums[ind] + solve(nums , ind - 2 , dp);
        int nonpick = 0 + solve(nums , ind - 1 , dp);

        return dp[ind] =  max(pick , nonpick);
    }
    int rob(vector<int>& nums) {
        int n = nums.size();
        vector<int> dp(n,-1);
        return solve(nums , n-1 , dp);
    }
};
// Tabulation SC -> O(N)
class Solution3 {
public:
int rob(vector<int>& nums) {
        int n = nums.size();
        vector<int> dp(n,0);
        dp[0] = nums[0];
        for(int i = 1 ; i<n ; i++){
            int take = nums[i] ; if(i>1) take += dp[i - 2];
            int nontake = 0 + dp[i-1];

            dp[i] = max(take , nontake);
        }
        return dp[n-1];
    }
};

// Most Optimized SC -> O(1)
class Solution {
public:
int rob(vector<int>& nums) {
        int n = nums.size();

        int prev1 = nums[0];
        int prev2 = 0;

        for(int i = 0 ; i<n ; i++){
            int take = nums[i] ; if(i>1) take += prev2;
            int nontake = 0 + prev1;
            int curr = max(take , nontake);

            prev2 = prev1;
            prev1 = curr;
        }
        return prev1;
    }
};
